// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using quizer_backend.Data;

namespace quizer_backend.Migrations
{
    [DbContext(typeof(QuizerContext))]
    [Migration("20181027145709_versions2")]
    partial class versions2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("quizer_backend.Data.Entities.Quiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedTime");

                    b.Property<long>("LastModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OwnerId");

                    b.HasKey("Id");

                    b.ToTable("QuizItems");
                });

            modelBuilder.Entity("quizer_backend.Data.Entities.QuizAccess", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Access");

                    b.Property<long>("QuizId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizAccessItems");
                });

            modelBuilder.Entity("quizer_backend.Data.Entities.QuizLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Access");

                    b.Property<string>("Link");

                    b.Property<long>("QuizId");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizLinks");
                });

            modelBuilder.Entity("quizer_backend.Data.Entities.QuizQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("LastModifiedTime");

                    b.Property<long>("QuizId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestionItems");
                });

            modelBuilder.Entity("quizer_backend.Data.Entities.QuizQuestionAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCorrect");

                    b.Property<long>("LastModifiedTime");

                    b.Property<long>("QuizQuestionId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("QuizQuestionId");

                    b.ToTable("QuizQuestionAnswerItems");
                });

            modelBuilder.Entity("quizer_backend.Data.Entities.QuizQuestionAnswerVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreationTime");

                    b.Property<bool>("IsCorrect");

                    b.Property<long>("QuizQuestionAnswerId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("QuizQuestionAnswerId");

                    b.ToTable("QuizQuestionAnswerVersionItems");
                });

            modelBuilder.Entity("quizer_backend.Data.Entities.QuizQuestionVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreationTime");

                    b.Property<long>("QuizQuestionId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("QuizQuestionId");

                    b.ToTable("QuizQuestionVersionItems");
                });

            modelBuilder.Entity("quizer_backend.Data.Entities.SolvingQuiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreationTime");

                    b.Property<long>("QuizId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("SolvingQuizItems");
                });

            modelBuilder.Entity("quizer_backend.Data.Entities.QuizAccess", b =>
                {
                    b.HasOne("quizer_backend.Data.Entities.Quiz", "Quiz")
                        .WithMany("Creators")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("quizer_backend.Data.Entities.QuizLink", b =>
                {
                    b.HasOne("quizer_backend.Data.Entities.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("quizer_backend.Data.Entities.QuizQuestion", b =>
                {
                    b.HasOne("quizer_backend.Data.Entities.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("quizer_backend.Data.Entities.QuizQuestionAnswer", b =>
                {
                    b.HasOne("quizer_backend.Data.Entities.QuizQuestion", "QuizQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("quizer_backend.Data.Entities.QuizQuestionAnswerVersion", b =>
                {
                    b.HasOne("quizer_backend.Data.Entities.QuizQuestionAnswer", "QuizQuestionAnswer")
                        .WithMany("Versions")
                        .HasForeignKey("QuizQuestionAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("quizer_backend.Data.Entities.QuizQuestionVersion", b =>
                {
                    b.HasOne("quizer_backend.Data.Entities.QuizQuestion", "QuizQuestion")
                        .WithMany("Versions")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("quizer_backend.Data.Entities.SolvingQuiz", b =>
                {
                    b.HasOne("quizer_backend.Data.Entities.Quiz", "Quiz")
                        .WithMany("SolvingQuizes")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
